# Licensed to the Apache Software Foundation (ASF)
# See LICENSE for details

# Use specific versions instead of latest tags
ARG PY_VER=3.11.7-slim-bookworm
ARG NODE_VER=20.11.1-bullseye-slim
ARG BUILDPLATFORM=${BUILDPLATFORM:-amd64}
ARG BUILD_TRANSLATIONS="false"

######################################################################
# Node stage for frontend assets
######################################################################
FROM --platform=${BUILDPLATFORM} node:${NODE_VER} AS superset-node-ci
ARG BUILD_TRANSLATIONS
ARG DEV_MODE="false"
ENV BUILD_TRANSLATIONS=${BUILD_TRANSLATIONS} \
    DEV_MODE=${DEV_MODE} \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    BUILD_CMD=${NPM_BUILD_CMD:-build}

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    python3 \
    zstd \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app/superset-frontend

# Create necessary directories
RUN mkdir -p /app/superset/static/assets \
    /app/superset/translations

# Optimize npm installation with cache mount and workspaces
COPY docker/frontend-mem-nag.sh /app/docker/
RUN /app/docker/frontend-mem-nag.sh

COPY superset-frontend/package*.json ./
RUN --mount=type=cache,target=/root/.npm \
    if [ "$DEV_MODE" = "false" ]; then \
        npm ci; \
    fi

# Build frontend assets
COPY superset-frontend .
RUN --mount=type=cache,target=/root/.npm \
    if [ "$DEV_MODE" = "false" ]; then \
        npm run ${BUILD_CMD}; \
    fi

# Handle translations if enabled
COPY superset/translations /app/superset/translations
RUN if [ "$BUILD_TRANSLATIONS" = "true" ]; then \
        npm run build-translation; \
    fi; \
    rm -rf /app/superset/translations/*/*/*.{po,mo}

######################################################################
# Python base stage
######################################################################
FROM python:${PY_VER} AS python-base

ARG SUPERSET_HOME="/app/superset_home"
ENV SUPERSET_HOME=${SUPERSET_HOME} \
    PYTHONPATH="/app/pythonpath" \
    SUPERSET_PORT="8088" \
    FLASK_APP="superset.app:create_app()" \
    SUPERSET_ENV="production"

# Create user and necessary directories in a single layer
RUN useradd --user-group -d ${SUPERSET_HOME} -m --no-log-init --shell /bin/bash superset \
    && mkdir -p ${SUPERSET_HOME} ${PYTHONPATH} \
    && chown -R superset:superset ${SUPERSET_HOME} \
    && chmod -R 1777 ${SUPERSET_HOME}

# Install common system dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    default-libmysqlclient-dev \
    git \
    libecpg-dev \
    libfontconfig1 \
    libglib2.0-0 \
    libjpeg-dev \
    libldap2-dev \
    libnss3 \
    libpng-dev \
    libpq-dev \
    libsasl2-dev \
    libsasl2-modules-gssapi-mit \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    libzstd-dev \
    pkg-config \
    python3-dev \
    python3-pil \
    unzip \
    wget \
    xvfb \
    zip \
    && rm -rf /var/lib/apt/lists/*

# Setup Python environment with uv
RUN pip install --no-cache-dir --upgrade uv \
    && uv venv /app/.venv \
    && . /app/.venv/bin/activate

ENV PATH="/app/.venv/bin:${PATH}"

######################################################################
# Python translation compiler stage
######################################################################
FROM python-base AS python-translation-compiler

ARG BUILD_TRANSLATIONS
ENV BUILD_TRANSLATIONS=${BUILD_TRANSLATIONS}

COPY requirements/translations.txt requirements/
RUN --mount=type=cache,target=/root/.cache/uv \
    . /app/.venv/bin/activate \
    && uv pip install -r requirements/translations.txt

COPY superset/translations/ /app/translations_mo/
RUN if [ "$BUILD_TRANSLATIONS" = "true" ]; then \
        pybabel compile -d /app/translations_mo || true; \
    fi; \
    rm -f /app/translations_mo/*/*/*.{po,json}

######################################################################
# Production stage
######################################################################
FROM python-base AS production

# Copy necessary files
COPY --from=superset-node-ci /app/superset/static/assets superset/static/assets
COPY --from=python-translation-compiler /app/translations_mo superset/translations
COPY docker/entrypoints /app/docker/entrypoints/
COPY pyproject.toml setup.py MANIFEST.in README.md ./
COPY superset-frontend/package.json superset-frontend/
COPY requirements/base.txt requirements/
COPY superset superset

# Install production dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install -r requirements/base.txt \
    && uv pip install . \
    && python -m compileall /app/superset

# Setup final configurations
RUN mkdir -p apache_superset.egg-info \
    && chown -R superset:superset /app \
    && chmod -R 775 /app \
    && chmod -R 777 /app/apache_superset.egg-info

USER superset

# Health check and startup
HEALTHCHECK CMD curl -f "http://localhost:${SUPERSET_PORT}/health"
EXPOSE ${SUPERSET_PORT}
CMD ["/app/docker/entrypoints/run-server.sh"]

######################################################################
# Development stage
######################################################################
FROM production AS dev

USER root

# Install development dependencies
COPY requirements/development.txt requirements/
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install -r requirements/development.txt \
    && uv pip install .[postgres]

# Install browser testing tools
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install playwright \
    && playwright install-deps \
    && playwright install chromium

# Setup Oracle client
ENV ORACLE_HOME=/opt/oracle/instantclient_23_4 \
    LD_LIBRARY_PATH=/opt/oracle/instantclient_23_4 \
    PATH="/opt/oracle/instantclient_23_4:/app/superset_home/.local/bin:${PATH}"

USER superset

######################################################################
# CI stage
######################################################################
FROM production AS ci

USER root

# Install CI-specific dependencies
ARG GECKODRIVER_VERSION=v0.32.0
ARG FIREFOX_VERSION=106.0.3

# Update certificates and install CI tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    firefox-esr \
    libasound2 \
    libdbus-glib-1-2 \
    libgtk-3-0 \
    libnss3 \
    libx11-xcb1 \
    libxtst6 \
    openssl \
    wget \
    && wget -q https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz \
    && tar -xzf geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz -C /usr/local/bin \
    && rm geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz \
    && rm -rf /var/lib/apt/lists/*

# Setup SSL certificates
ENV REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt \
    SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt \
    TZ=UTC

RUN uv pip install .[postgres]

USER superset

CMD ["/app/docker/entrypoints/docker-ci.sh"]
